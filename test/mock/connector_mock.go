// Code generated by MockGen. DO NOT EDIT.
// Source: app/scheduler/connector/connector.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/beihai0xff/pudding/api/gen/pudding/types/v1"
	types0 "github.com/beihai0xff/pudding/types"
	gomock "github.com/golang/mock/gomock"
)

// MockRealTimeConnector is a mock of RealTimeConnector interface.
type MockRealTimeConnector struct {
	ctrl     *gomock.Controller
	recorder *MockRealTimeConnectorMockRecorder
}

// MockRealTimeConnectorMockRecorder is the mock recorder for MockRealTimeConnector.
type MockRealTimeConnectorMockRecorder struct {
	mock *MockRealTimeConnector
}

// NewMockRealTimeConnector creates a new mock instance.
func NewMockRealTimeConnector(ctrl *gomock.Controller) *MockRealTimeConnector {
	mock := &MockRealTimeConnector{ctrl: ctrl}
	mock.recorder = &MockRealTimeConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealTimeConnector) EXPECT() *MockRealTimeConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRealTimeConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRealTimeConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRealTimeConnector)(nil).Close))
}

// NewConsumer mocks base method.
func (m *MockRealTimeConnector) NewConsumer(topic, group string, batchSize int, fn types0.HandleMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsumer", topic, group, batchSize, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewConsumer indicates an expected call of NewConsumer.
func (mr *MockRealTimeConnectorMockRecorder) NewConsumer(topic, group, batchSize, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsumer", reflect.TypeOf((*MockRealTimeConnector)(nil).NewConsumer), topic, group, batchSize, fn)
}

// Produce mocks base method.
func (m *MockRealTimeConnector) Produce(ctx context.Context, msg *types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockRealTimeConnectorMockRecorder) Produce(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockRealTimeConnector)(nil).Produce), ctx, msg)
}
