// Code generated by MockGen. DO NOT EDIT.
// Source: ../../app/scheduler/broker/broker.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/beihai0xff/pudding/api/gen/pudding/types/v1"
	types0 "github.com/beihai0xff/pudding/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDelayBroker is a mock of DelayBroker interface.
type MockDelayBroker struct {
	ctrl     *gomock.Controller
	recorder *MockDelayBrokerMockRecorder
}

// MockDelayBrokerMockRecorder is the mock recorder for MockDelayBroker.
type MockDelayBrokerMockRecorder struct {
	mock *MockDelayBroker
}

// NewMockDelayBroker creates a new mock instance.
func NewMockDelayBroker(ctrl *gomock.Controller) *MockDelayBroker {
	mock := &MockDelayBroker{ctrl: ctrl}
	mock.recorder = &MockDelayBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelayBroker) EXPECT() *MockDelayBrokerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDelayBroker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDelayBrokerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDelayBroker)(nil).Close))
}

// Consume mocks base method.
func (m *MockDelayBroker) Consume(ctx context.Context, now, batchSize int64, fn types0.HandleMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, now, batchSize, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockDelayBrokerMockRecorder) Consume(ctx, now, batchSize, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockDelayBroker)(nil).Consume), ctx, now, batchSize, fn)
}

// Produce mocks base method.
func (m *MockDelayBroker) Produce(ctx context.Context, msg *types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockDelayBrokerMockRecorder) Produce(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockDelayBroker)(nil).Produce), ctx, msg)
}
