// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/beihai0xff/pudding/app/scheduler/broker (interfaces: DelayBroker,RealTimeConnector)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/beihai0xff/pudding/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDelayBroker is a mock of DelayBroker interface.
type MockDelayBroker struct {
	ctrl     *gomock.Controller
	recorder *MockDelayBrokerMockRecorder
}

// MockDelayBrokerMockRecorder is the mock recorder for MockDelayBroker.
type MockDelayBrokerMockRecorder struct {
	mock *MockDelayBroker
}

// NewMockDelayBroker creates a new mock instance.
func NewMockDelayBroker(ctrl *gomock.Controller) *MockDelayBroker {
	mock := &MockDelayBroker{ctrl: ctrl}
	mock.recorder = &MockDelayBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelayBroker) EXPECT() *MockDelayBrokerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDelayBroker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDelayBrokerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDelayBroker)(nil).Close))
}

// Consume mocks base method.
func (m *MockDelayBroker) Consume(arg0 context.Context, arg1, arg2 int64, arg3 types.HandleMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockDelayBrokerMockRecorder) Consume(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockDelayBroker)(nil).Consume), arg0, arg1, arg2, arg3)
}

// Produce mocks base method.
func (m *MockDelayBroker) Produce(arg0 context.Context, arg1 *types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockDelayBrokerMockRecorder) Produce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockDelayBroker)(nil).Produce), arg0, arg1)
}

// MockRealTimeConnector is a mock of RealTimeConnector interface.
type MockRealTimeConnector struct {
	ctrl     *gomock.Controller
	recorder *MockRealTimeConnectorMockRecorder
}

// MockRealTimeConnectorMockRecorder is the mock recorder for MockRealTimeConnector.
type MockRealTimeConnectorMockRecorder struct {
	mock *MockRealTimeConnector
}

// NewMockRealTimeConnector creates a new mock instance.
func NewMockRealTimeConnector(ctrl *gomock.Controller) *MockRealTimeConnector {
	mock := &MockRealTimeConnector{ctrl: ctrl}
	mock.recorder = &MockRealTimeConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealTimeConnector) EXPECT() *MockRealTimeConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRealTimeConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRealTimeConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRealTimeConnector)(nil).Close))
}

// NewConsumer mocks base method.
func (m *MockRealTimeConnector) NewConsumer(arg0, arg1 string, arg2 int, arg3 types.HandleMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsumer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewConsumer indicates an expected call of NewConsumer.
func (mr *MockRealTimeConnectorMockRecorder) NewConsumer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsumer", reflect.TypeOf((*MockRealTimeConnector)(nil).NewConsumer), arg0, arg1, arg2, arg3)
}

// Produce mocks base method.
func (m *MockRealTimeConnector) Produce(arg0 context.Context, arg1 *types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockRealTimeConnectorMockRecorder) Produce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockRealTimeConnector)(nil).Produce), arg0, arg1)
}
