// Code generated by MockGen. DO NOT EDIT.
// Source: app/trigger/repo/webhook_template_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	trigger "github.com/beihai0xff/pudding/api/gen/pudding/trigger/v1"
	constants "github.com/beihai0xff/pudding/app/trigger/pkg/constants"
	po "github.com/beihai0xff/pudding/app/trigger/repo/po"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookTemplate is a mock of WebhookTemplate interface.
type MockWebhookTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookTemplateMockRecorder
}

// MockWebhookTemplateMockRecorder is the mock recorder for MockWebhookTemplate.
type MockWebhookTemplateMockRecorder struct {
	mock *MockWebhookTemplate
}

// NewMockWebhookTemplate creates a new mock instance.
func NewMockWebhookTemplate(ctrl *gomock.Controller) *MockWebhookTemplate {
	mock := &MockWebhookTemplate{ctrl: ctrl}
	mock.recorder = &MockWebhookTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookTemplate) EXPECT() *MockWebhookTemplateMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockWebhookTemplate) FindByID(ctx context.Context, id uint) (*po.WebhookTriggerTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*po.WebhookTriggerTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockWebhookTemplateMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockWebhookTemplate)(nil).FindByID), ctx, id)
}

// Insert mocks base method.
func (m *MockWebhookTemplate) Insert(ctx context.Context, p *po.WebhookTriggerTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockWebhookTemplateMockRecorder) Insert(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWebhookTemplate)(nil).Insert), ctx, p)
}

// PageQuery mocks base method.
func (m *MockWebhookTemplate) PageQuery(ctx context.Context, p *constants.PageQuery, status trigger.TriggerStatus) ([]*po.WebhookTriggerTemplate, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageQuery", ctx, p, status)
	ret0, _ := ret[0].([]*po.WebhookTriggerTemplate)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PageQuery indicates an expected call of PageQuery.
func (mr *MockWebhookTemplateMockRecorder) PageQuery(ctx, p, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageQuery", reflect.TypeOf((*MockWebhookTemplate)(nil).PageQuery), ctx, p, status)
}

// UpdateStatus mocks base method.
func (m *MockWebhookTemplate) UpdateStatus(ctx context.Context, id uint, status trigger.TriggerStatus) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockWebhookTemplateMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockWebhookTemplate)(nil).UpdateStatus), ctx, id, status)
}
