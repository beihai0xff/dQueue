// Code generated by MockGen. DO NOT EDIT.
// Source: app/broker/storage/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/beihai0xff/pudding/api/gen/pudding/types/v1"
	types0 "github.com/beihai0xff/pudding/app/broker/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDelayStorage is a mock of DelayStorage interface.
type MockDelayStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDelayStorageMockRecorder
}

// MockDelayStorageMockRecorder is the mock recorder for MockDelayStorage.
type MockDelayStorageMockRecorder struct {
	mock *MockDelayStorage
}

// NewMockDelayStorage creates a new mock instance.
func NewMockDelayStorage(ctrl *gomock.Controller) *MockDelayStorage {
	mock := &MockDelayStorage{ctrl: ctrl}
	mock.recorder = &MockDelayStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelayStorage) EXPECT() *MockDelayStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDelayStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDelayStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDelayStorage)(nil).Close))
}

// Consume mocks base method.
func (m *MockDelayStorage) Consume(ctx context.Context, now uint64, batchSize int64, fn types0.HandleMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, now, batchSize, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockDelayStorageMockRecorder) Consume(ctx, now, batchSize, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockDelayStorage)(nil).Consume), ctx, now, batchSize, fn)
}

// Produce mocks base method.
func (m *MockDelayStorage) Produce(ctx context.Context, msg *types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockDelayStorageMockRecorder) Produce(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockDelayStorage)(nil).Produce), ctx, msg)
}
