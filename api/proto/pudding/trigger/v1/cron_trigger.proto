syntax = "proto3";
package pudding.trigger.v1;
option go_package = "github.com/beihai0xff/pudding/api/gen/pudding/trigger/v1;trigger";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";


import "pudding/types/v1/response.proto" ;
import "pudding/trigger/v1/types.proto";

// The Pudding service definition.
service CronTriggerService {
  // Sends a Ping
  rpc Ping (google.protobuf.Empty) returns (types.v1.PingResponse) {
    // option type is http
    option (google.api.http) = {
      get: "/pudding/trigger/v1/ping"
    };
  }

  // FindOneByID find cron trigger by id
  rpc FindOneByID (FindOneByIDRequest) returns (FindOneByIDResponse) {}
  // PageQuery page query cron trigger
  rpc PageQuery (PageQueryRequest) returns (PageQueryResponse) {}

  // Register create a cron trigger
  rpc Register (RegisterRequest) returns (types.v1.Response) {}

  // UpdateStatus update cron trigger status
  rpc UpdateStatus (UpdateStatusRequest) returns (types.v1.Response) {}

}

// The UpdateStatus request message.
message FindOneByIDRequest {
  // CronTrigger ID
  uint64 id = 1;
}

message FindOneByIDResponse {
  int32 code = 1;
  string message = 2;
  TriggerTemplate body = 3;
}

// The UpdateStatus request message.
message PageQueryRequest {
  uint64 offset = 1;
  uint64 limit = 2;
}

message PageQueryResponse {
  int32 code = 1;
  string message = 2;
  uint32 total = 3;
  repeated TriggerTemplate body = 4;
}


message RegisterRequest{
  string cron_expr = 1;
  string topic = 2;
  bytes payload = 3;
}

// UpdateStatus request message.
message UpdateStatusRequest {
  // CronTrigger ID
  uint64 id = 1;
  // CronTrigger status
   TriggerStatus status = 2;
}


