// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trigger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebhookTriggerServiceClient is the client API for WebhookTriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookTriggerServiceClient interface {
	// FindOneByID find webhook trigger template by id
	FindOneByID(ctx context.Context, in *FindOneByIDRequest, opts ...grpc.CallOption) (*WebhookFindOneByIDResponse, error)
	// PageQueryTemplate page query webhook trigger template
	PageQueryTemplate(ctx context.Context, in *PageQueryTemplateRequest, opts ...grpc.CallOption) (*WebhookPageQueryResponse, error)
	// Register create a webhook trigger template
	Register(ctx context.Context, in *WebhookTriggerServiceRegisterRequest, opts ...grpc.CallOption) (*WebhookRegisterResponse, error)
	// UpdateStatus update webhook trigger template status
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	// Call call a webhook trigger
	Call(ctx context.Context, in *WebhookTriggerServiceCallRequest, opts ...grpc.CallOption) (*WebhookTriggerServiceCallResponse, error)
}

type webhookTriggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookTriggerServiceClient(cc grpc.ClientConnInterface) WebhookTriggerServiceClient {
	return &webhookTriggerServiceClient{cc}
}

func (c *webhookTriggerServiceClient) FindOneByID(ctx context.Context, in *FindOneByIDRequest, opts ...grpc.CallOption) (*WebhookFindOneByIDResponse, error) {
	out := new(WebhookFindOneByIDResponse)
	err := c.cc.Invoke(ctx, "/pudding.trigger.v1.WebhookTriggerService/FindOneByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookTriggerServiceClient) PageQueryTemplate(ctx context.Context, in *PageQueryTemplateRequest, opts ...grpc.CallOption) (*WebhookPageQueryResponse, error) {
	out := new(WebhookPageQueryResponse)
	err := c.cc.Invoke(ctx, "/pudding.trigger.v1.WebhookTriggerService/PageQueryTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookTriggerServiceClient) Register(ctx context.Context, in *WebhookTriggerServiceRegisterRequest, opts ...grpc.CallOption) (*WebhookRegisterResponse, error) {
	out := new(WebhookRegisterResponse)
	err := c.cc.Invoke(ctx, "/pudding.trigger.v1.WebhookTriggerService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookTriggerServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/pudding.trigger.v1.WebhookTriggerService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookTriggerServiceClient) Call(ctx context.Context, in *WebhookTriggerServiceCallRequest, opts ...grpc.CallOption) (*WebhookTriggerServiceCallResponse, error) {
	out := new(WebhookTriggerServiceCallResponse)
	err := c.cc.Invoke(ctx, "/pudding.trigger.v1.WebhookTriggerService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookTriggerServiceServer is the server API for WebhookTriggerService service.
// All implementations must embed UnimplementedWebhookTriggerServiceServer
// for forward compatibility
type WebhookTriggerServiceServer interface {
	// FindOneByID find webhook trigger template by id
	FindOneByID(context.Context, *FindOneByIDRequest) (*WebhookFindOneByIDResponse, error)
	// PageQueryTemplate page query webhook trigger template
	PageQueryTemplate(context.Context, *PageQueryTemplateRequest) (*WebhookPageQueryResponse, error)
	// Register create a webhook trigger template
	Register(context.Context, *WebhookTriggerServiceRegisterRequest) (*WebhookRegisterResponse, error)
	// UpdateStatus update webhook trigger template status
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	// Call call a webhook trigger
	Call(context.Context, *WebhookTriggerServiceCallRequest) (*WebhookTriggerServiceCallResponse, error)
	mustEmbedUnimplementedWebhookTriggerServiceServer()
}

// UnimplementedWebhookTriggerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookTriggerServiceServer struct {
}

func (UnimplementedWebhookTriggerServiceServer) FindOneByID(context.Context, *FindOneByIDRequest) (*WebhookFindOneByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneByID not implemented")
}
func (UnimplementedWebhookTriggerServiceServer) PageQueryTemplate(context.Context, *PageQueryTemplateRequest) (*WebhookPageQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageQueryTemplate not implemented")
}
func (UnimplementedWebhookTriggerServiceServer) Register(context.Context, *WebhookTriggerServiceRegisterRequest) (*WebhookRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedWebhookTriggerServiceServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedWebhookTriggerServiceServer) Call(context.Context, *WebhookTriggerServiceCallRequest) (*WebhookTriggerServiceCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedWebhookTriggerServiceServer) mustEmbedUnimplementedWebhookTriggerServiceServer() {}

// UnsafeWebhookTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookTriggerServiceServer will
// result in compilation errors.
type UnsafeWebhookTriggerServiceServer interface {
	mustEmbedUnimplementedWebhookTriggerServiceServer()
}

func RegisterWebhookTriggerServiceServer(s grpc.ServiceRegistrar, srv WebhookTriggerServiceServer) {
	s.RegisterService(&WebhookTriggerService_ServiceDesc, srv)
}

func _WebhookTriggerService_FindOneByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTriggerServiceServer).FindOneByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pudding.trigger.v1.WebhookTriggerService/FindOneByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTriggerServiceServer).FindOneByID(ctx, req.(*FindOneByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookTriggerService_PageQueryTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQueryTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTriggerServiceServer).PageQueryTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pudding.trigger.v1.WebhookTriggerService/PageQueryTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTriggerServiceServer).PageQueryTemplate(ctx, req.(*PageQueryTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookTriggerService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookTriggerServiceRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTriggerServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pudding.trigger.v1.WebhookTriggerService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTriggerServiceServer).Register(ctx, req.(*WebhookTriggerServiceRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookTriggerService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTriggerServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pudding.trigger.v1.WebhookTriggerService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTriggerServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookTriggerService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookTriggerServiceCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTriggerServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pudding.trigger.v1.WebhookTriggerService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTriggerServiceServer).Call(ctx, req.(*WebhookTriggerServiceCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookTriggerService_ServiceDesc is the grpc.ServiceDesc for WebhookTriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookTriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pudding.trigger.v1.WebhookTriggerService",
	HandlerType: (*WebhookTriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOneByID",
			Handler:    _WebhookTriggerService_FindOneByID_Handler,
		},
		{
			MethodName: "PageQueryTemplate",
			Handler:    _WebhookTriggerService_PageQueryTemplate_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _WebhookTriggerService_Register_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _WebhookTriggerService_UpdateStatus_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _WebhookTriggerService_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pudding/trigger/v1/webhook_trigger.proto",
}
